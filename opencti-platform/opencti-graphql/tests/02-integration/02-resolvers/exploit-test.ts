import type { DocumentNode } from 'graphql/index.js';
import gql from 'graphql-tag';
import { describe, expect, it } from 'vitest';
import type { GraphQLResponse } from 'apollo-server-core';
import { queryAsAdmin } from '../../utils/testQuery';

describe('Exploit Resolver standard behavior', () => {
  it('should create an exploit', async () => {
    const exploitName: string = 'an Exploit';
    const query: DocumentNode = gql`
      mutation ExploitAdd($input: ExploitAddInput!) {
          exploitAdd(input: $input) {
              id,
              standard_id,
              name,
              description,
              published_date
          }
      }
    `;

    const variables = {
      input: {
        stix_id: 'exploit--efb6fbec-d916-11ed-afa1-0242ac120002',
        name: exploitName,
        description: 'an exploit description',
        published_date: '2023-01-16T15:54:59.194Z'
      }
    };

    const exploit: GraphQLResponse = await queryAsAdmin({ query, variables });

    console.log(exploit);

    expect(exploit).not.toBeNull();
    expect(exploit.data.exploitAdd).not.toBeNull();
    expect(exploit.data.exploitAdd.name).toEqual(exploitName);
  });
});
