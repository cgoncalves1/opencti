import type { DocumentNode } from 'graphql/index';
import gql from 'graphql-tag';
import { describe, expect, it } from 'vitest';
import type { GraphQLResponse } from 'apollo-server-core';
import { ADMIN_USER, queryAsAdmin } from '../../utils/testQuery';
import { createEntity, createRelation } from '../../../src/database/middleware';
import { ENTITY_TYPE_ATTACK_PATTERN, ENTITY_TYPE_VULNERABILITY } from '../../../src/schema/stixDomainObject';
import { executionContext } from '../../../src/utils/access';
import { RELATION_TARGETS, RELATION_USES } from '../../../src/schema/stixCoreRelationship';

const exploit = {
  stix_id: 'exploit--efb6fbec-d916-11ed-afa1-0242ac120002',
  name: 'an Exploit',
  description: 'an exploit description',
  published_date: '2023-01-16T15:54:59.194Z'
};

describe('Exploit', () => {
  let exploitId: any;

  it('should create an exploit', async () => {
    const exploitCreationQuery: DocumentNode = gql`
      mutation ExploitAdd($input: ExploitAddInput!) {
        exploitAdd(input: $input) {
          id
          standard_id
          name
          description
          published_date
        }
      }
    `;

    const exploitCreationVariables = { input: exploit };

    const creationResponse = await queryAsAdmin({
      query: exploitCreationQuery,
      variables: exploitCreationVariables
    });

    expect(creationResponse.data?.exploitAdd.name).toEqual(exploit.name);

    exploitId = creationResponse.data?.exploitAdd.id;
  });

  it('should load exploit from store with its internal id', async () => {
    const query: DocumentNode = gql`
      query exploit($id: String!) {
        exploit(id: $id) {
          id
        }
      }
    `;
    const variables = { id: exploitId };

    const response: GraphQLResponse = await queryAsAdmin({ query, variables });

    expect(response.data?.exploit.id).toEqual(exploitId);
  });

  it('should load the exploit from store with its stix id', async () => {
    const query: DocumentNode = gql`
      query exploit($id: String!) {
        exploit(id: $id) {
          id
        }
      }
    `;
    const variables = { id: exploit.stix_id };

    const response: GraphQLResponse = await queryAsAdmin({ query, variables });

    expect(response.data?.exploit.id).toEqual(exploitId);
  });

  it('can uses an attack pattern', async () => {
    const anAttackPattern = {
      name: 'attack pattern',
      description: 'only meant to be used by an exploit',
      x_mitre_id: '',
      objectLabel: [],
      objectMarking: [],
      killChainPhases: [],
      externalReferences: []
    };
    const attackPatternCreationResponse = await createEntity(executionContext('testing'), ADMIN_USER, anAttackPattern, ENTITY_TYPE_ATTACK_PATTERN);
    const exploitUsesAttackPatternRelationship = {
      relationship_type: RELATION_USES,
      fromId: exploitId,
      toId: attackPatternCreationResponse?.id,
    };
    await createRelation(executionContext('testing'), ADMIN_USER, exploitUsesAttackPatternRelationship);

    const query: DocumentNode = gql`
      query exploit($id: String!) {
        exploit(id: $id) {
          stixCoreRelationships {
            edges {
              node {
                to {
                  ... on AttackPattern {
                    id
                  }
                }
              }
            }
          }
        }
      }
    `;
    const variables = { id: exploitId };
    const response: GraphQLResponse = await queryAsAdmin({ query, variables });
    const relationsId = response.data?.exploit.stixCoreRelationships.edges.map((relation) => relation.node.to.id);

    expect(relationsId).toContain(attackPatternCreationResponse.id);
  });

  it('can target a vulnerability', async () => {
    const aVulnerability = {
      name: 'vulnerability',
      description: 'meant to test the target relation with exploit',
      x_opencti_base_score: 1,
      x_opencti_base_severity: '',
      x_opencti_attack_vector: '',
      confidence: 75,
      objectMarking: [],
      objectLabel: [],
      externalReferences: []
    };
    const vulnerabilityCreationResponse = await createEntity(executionContext('testing'), ADMIN_USER, aVulnerability, ENTITY_TYPE_VULNERABILITY);
    const exploitTargetsVulnerabilityRelationship = {
      relationship_type: RELATION_TARGETS,
      fromId: exploitId,
      toId: vulnerabilityCreationResponse?.id,
    };
    await createRelation(executionContext('testing'), ADMIN_USER, exploitTargetsVulnerabilityRelationship);

    const query: DocumentNode = gql`
      query exploit($id: String!) {
        exploit(id: $id) {
          stixCoreRelationships {
            edges {
              node {
                to {
                  ... on Vulnerability {
                    id
                  }
                }
              }
            }
          }
        }
      }
    `;
    const variables = { id: exploitId };
    const response: GraphQLResponse = await queryAsAdmin({ query, variables });
    const relationsId = response.data?.exploit.stixCoreRelationships.edges.map((relation) => relation.node.to.id);

    console.log(relationsId);

    expect(relationsId).toContain(vulnerabilityCreationResponse.id);
  });
});
