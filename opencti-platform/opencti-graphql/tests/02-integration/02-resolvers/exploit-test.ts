import type { DocumentNode } from 'graphql/index';
import gql from 'graphql-tag';
import { describe, expect, it } from 'vitest';
import type { GraphQLResponse } from 'apollo-server-core';
import { queryAsAdmin } from '../../utils/testQuery';

const exploit = {
  stix_id: 'exploit--efb6fbec-d916-11ed-afa1-0242ac120002',
  name: 'an Exploit',
  description: 'an exploit description',
  published_date: '2023-01-16T15:54:59.194Z'
};

describe('Exploit Resolver standard behavior', () => {
  let exploitId: any;

  it('should create an exploit', async () => {
    const query: DocumentNode = gql`
      mutation ExploitAdd($input: ExploitAddInput!) {
        exploitAdd(input: $input) {
          id,
          standard_id,
          name,
          description,
          published_date
        }
      }
    `;

    const variables = { input: exploit };

    const response: GraphQLResponse = await queryAsAdmin({ query, variables });

    const data = response!.data!;

    expect(data.exploitAdd.name).toEqual(exploit.name);
    exploitId = data.exploitAdd.id;
  });

  it('should load exploit from store by its internal id', async () => {
    const query: DocumentNode = gql`
      query exploit($id: String!) {
        exploit(id: $id) {
          id
        }
      }
    `;
    const variables = { id: exploitId };

    const response: GraphQLResponse = await queryAsAdmin({ query, variables });

    expect(response!.data!.exploit.id).toEqual(exploitId);
  });
});
