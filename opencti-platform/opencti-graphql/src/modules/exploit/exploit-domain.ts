import type { AuthContext, AuthUser } from '../../types/user';
import type { ExploitAddInput } from '../../generated/graphql';
import type { QueryExploitsArgs } from '../../generated/graphql';
import { createEntity } from '../../database/middleware';
import { notify } from '../../database/redis';
import { BUS_TOPICS } from '../../config/conf';
import { ABSTRACT_STIX_DOMAIN_OBJECT } from '../../schema/general';
import { listEntitiesPaginated, storeLoadById } from '../../database/middleware-loader';
import type { BasicStoreEntityExploit } from './exploit-types';
import { ENTITY_TYPE_EXPLOIT } from './exploit-types';
import type { BasicStoreEntityDataSource } from '../dataSource/dataSource-types';
import type { StoreEntityConnection } from '../../types/store';

export function findById(context: AuthContext, user: AuthUser, id: string): BasicStoreEntityExploit {
  return storeLoadById(context, user, id, ENTITY_TYPE_EXPLOIT) as unknown as BasicStoreEntityExploit;
}

export async function addExploit(context: AuthContext, user: AuthUser, input: ExploitAddInput) {
  const created = await createEntity(context, user, input, ENTITY_TYPE_EXPLOIT);

  return notify(BUS_TOPICS[ABSTRACT_STIX_DOMAIN_OBJECT].ADDED_TOPIC, created, user);
}

export function findAll(context: any, user: AuthUser, opts: Partial<QueryExploitsArgs>): Promise<StoreEntityConnection<BasicStoreEntityDataSource>> {
  return listEntitiesPaginated<BasicStoreEntityDataSource>(context, user, [ENTITY_TYPE_EXPLOIT], opts);
}
