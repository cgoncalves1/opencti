import exploitSchema from './exploit.graphql';
import { ModuleDefinition, registerDefinition } from '../../schema/module';
import { ABSTRACT_STIX_DOMAIN_OBJECT } from '../../schema/general';
import { NAME_FIELD, normalizeName } from '../../schema/identifier';
import { exploitResolvers } from './exploit-resolvers';
import { ENTITY_TYPE_EXPLOIT, StixExploit, StoreEntityExploit } from './exploit-types';
import { convertExploitToStix } from './exploit-converter';
import { RELATION_TARGETS, RELATION_USES } from '../../schema/stixCoreRelationship';
import { ENTITY_TYPE_ATTACK_PATTERN, ENTITY_TYPE_VULNERABILITY } from '../../schema/stixDomainObject';
import { REL_EXTENDED } from '../../database/stix';

export const EXPLOIT_DEFINITION: ModuleDefinition<StoreEntityExploit, StixExploit> = {
  attributes: [
    { name: 'name', type: 'string', mandatoryType: 'external', multiple: false, upsert: true },
    { name: 'description', type: 'string', mandatoryType: 'external', multiple: false, upsert: true },
    { name: 'published_date', type: 'date', mandatoryType: 'external', multiple: false, upsert: true }
  ],
  converter: convertExploitToStix,
  graphql: {
    resolver: exploitResolvers,
    schema: exploitSchema
  },
  identifier: {
    definition: {
      [ENTITY_TYPE_EXPLOIT]: [{ src: NAME_FIELD }]
    },
    resolvers: {
      name(data: object) {
        return normalizeName(data);
      }
    }
  },
  relations: [
    {
      name: RELATION_USES,
      targets: [
        { name: ENTITY_TYPE_ATTACK_PATTERN, type: REL_EXTENDED }
      ]
    },
    {
      name: RELATION_TARGETS,
      targets: [
        { name: ENTITY_TYPE_VULNERABILITY, type: REL_EXTENDED }
      ]
    }
  ],
  representative: (stix: StixExploit) => {
    return stix.name;
  },
  type: {
    id: 'exploits',
    name: ENTITY_TYPE_EXPLOIT,
    category: ABSTRACT_STIX_DOMAIN_OBJECT
  }
};

registerDefinition(EXPLOIT_DEFINITION);
